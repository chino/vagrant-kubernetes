apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-account

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: test-role
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - deletecollection
  - update
  - patch

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: test-role
roleRef:
  apiGroup: ""
  kind: Role
  name: test-role
subjects:
- kind: ServiceAccount
  name: test-account

---

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: example-daemonset
spec:
  selector:
    matchLabels:
      app: example-daemonset
  template:
    metadata:
      labels:
        app: example-daemonset
    spec:
      serviceAccountName: test-account
      containers:
      - name: main-app
        image: tomcat:alpine
      initContainers:
      - name: service-creator
        image: centos
        command: ["sh","-c"]
        args:
        - |
          set -e

          yum install -y kubernetes-client

          namespace=$(</var/run/secrets/kubernetes.io/serviceaccount/namespace)
          token=$(</var/run/secrets/kubernetes.io/serviceaccount/token)
          cert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

          cluster=local
          server=https://kubernetes.default.svc
          account=test-account

          kubectl config set-cluster $cluster --server=$server --certificate-authority=$cert
          kubectl config set-credentials $account --token=$token
          kubectl config set-context $cluster --cluster=$cluster --user=$account \
            --namespace=$namespace
          kubectl config use-context $cluster

          # now let's create/update a service pointing to our node
          # we specify the endpoint manually
          name=example-daemonset-${NODE/.*}
          echo name=$name
          echo my_ip=$MY_IP
          kubectl apply -f - <<< "
            kind: Service
            apiVersion: v1
            metadata:
              labels:
                app: $name
              name: $name
            spec:
              type: ClusterIP
              ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
          "
          kubectl apply -f - <<< "
            kind: Endpoints
            apiVersion: v1
            metadata:
              name: $name
            subsets:
              - addresses:
                  - ip: $MY_IP
                ports:
                  - port: 8080
          "
        env:
        - name: NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

---

kind: Deployment
apiVersion: apps/v1beta1
metadata:
  name: example-node-and-pod-info
spec:
  replicas: 10
  template:
    metadata:
      labels:
        app: example-node-and-pod-info
    spec:
      containers:
        - name: test
          image: centos
          command: ["/bin/bash", "-c"]
          args:
          - |
            set -e

            echo "waiting for daemonset to appear"
            ds=example-daemonset-${NODE/.*}
            while ! curl -v -L $ds; do
              sleep 1
            done

            echo "daemonset alive!"
            tail -f /dev/null
          env:
          - name: NODE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
