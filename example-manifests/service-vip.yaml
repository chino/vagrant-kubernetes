###
# Description:
#   Using a service as a VIP
# Setup:
#   This will only properly behave correctly on k8s v1.7.1+ with
#   the udp conntrack bug properly fixed.
# Redirect:
#   kubectl label pods primary active=false --overwrite=true
#   kubectl label pods backup active=true
# Notes:
#   Kube-Proxy will clear conntrack entries only for UDP services.
#   Hence the example client below will be forced to the new endpoint only for udp.
#   The tcp client will only redirct if you force the tcp session to timeout:
#     ex: by killing the primary pod
###
kind: Service
apiVersion: v1
metadata:
  name: vip
spec:
  selector:
    role: active-primary
  ports:
    - protocol: TCP
      name: "stream"
      port: 80
    - protocol: UDP
      name: "command"
      port: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: primary
  labels:
    role: active-primary
spec:
  containers:
  - name: primary-tcp
    image: "alpine"
    command: ["/bin/sh", "-c", "echo starting; while sleep 1; do echo $(date +%s) = $HOSTNAME; done | nc -lk -p 80"]
  - name: primary-udp
    image: "ruby"
    # without the reply conntrack shows `UNREPLIED` and with the reply it shows `ASSURED`
    # check with `sudo cat /proc/net/nf_conntrack | grep -w 80 | grep -w udp`
    command: ["/bin/sh", "-c", "ruby -r socket -e 'puts :starting; $stdout.flush; s = UDPSocket.new; s.bind(nil,80); loop { m, c = s.recvfrom(4096); puts m; $stdout.flush; s.send(\"hi\",0,c[3],c[1]); }'"]
---
apiVersion: v1
kind: Pod
metadata:
  name: backup
spec:
  containers:
  - name: backup-tcp
    image: "alpine"
    command: ["/bin/sh", "-c", "echo starting; while sleep 1; do echo $(date +%s) = $HOSTNAME; done | nc -lk -p 80"]
  - name: backup-udp
    image: "ruby"
    command: ["/bin/sh", "-c", "ruby -r socket -e 'puts :starting; $stdout.flush; s = UDPSocket.new; s.bind(nil,80); loop { m, c = s.recvfrom(4096); puts m; $stdout.flush; s.send(\"hi\",0,c[3],c[1]); }'"]
---
apiVersion: v1
kind: Pod
metadata:
  name: client
spec:
  containers:
  - name: client-tcp
    image: "alpine"
    command: ["/bin/sh", "-c", "while sleep 1; do echo $(date +%s) = $HOSTNAME; done | while true; do nc -v -w 1 vip 80; done"]
  - name: client-udp
    image: "alpine"
    command: ["/bin/sh", "-c", "echo starting; while sleep 1; do echo $(date +%s) = $HOSTNAME; done | while true; do nc -v -w 1 -u vip 80; done"]
